import com.bmuschko.gradle.docker.tasks.image.*

buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:7.0.0"
        classpath "org.grails.plugins:views-gradle:2.0.0.BUILD-SNAPSHOT"

        // gradle docker plugin
        classpath "com.bmuschko:gradle-docker-plugin:3.6.0"
    }
}

version "0.1"
group "predestroy"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.plugins.views-json"
// gradle docker plugin
apply plugin: "com.bmuschko.docker-remote-api"

repositories {
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.4.0.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    profile "org.grails.profiles:rest-api"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "javax.xml.bind:jaxb-api:2.3.0"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.mockito:mockito-core"
    testCompile "io.micronaut:micronaut-http-client"
    testCompile "org.grails:grails-web-testing-support"
}

// Enable the creation of a fully
// executable archive file.
// needed to execute our war in docker
bootWar {
    launchScript()
}

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

ext {
    // let's hard code the name and version for easier processing.
    String name = "someProject"
    latestTag = "latest"
    dockerTag = 'latest'
    dockerName = "${name}".toLowerCase()
    dockerBuildDir = mkdir("${buildDir}/docker")
}
task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from src/main/docker and application jar to Docker temporal build directory'
    group = 'Docker'

    from 'src/main/docker'
    from war.archivePath //copy the war into work folder

    into dockerBuildDir
}
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
    description = 'Create a Dockerfile file'
    group = 'Docker'

    destFile = project.file("${dockerBuildDir}/Dockerfile")

    from 'adoptopenjdk/openjdk11:alpine'
    label(['maintainer': 'HÃ©lain Schoonjans'])

    exposePort 8080

    workingDir '/app'

    copyFile war.archiveName, 'application.war' //copy the archive into the new docker
    copyFile 'app-entrypoint.sh', 'app-entrypoint.sh'
    runCommand 'chmod +x app-entrypoint.sh'

    entryPoint '/app/app-entrypoint.sh'
}
task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    description = 'Create Docker image to run the Grails application'
    group = 'Docker'

    inputDir = file(dockerBuildDir)
    tag = "${dockerName}:${latestTag}"
}

task tagLatestImage(type: DockerTagImage, dependsOn: buildImage) {
    force = true
    repository = dockerName
    targetImageId { buildImage.getTag() }
    tag = dockerTag
}

task pushLatestImage(type: DockerPushImage, dependsOn: tagLatestImage) {
    description = 'Push the docker on ECR'
    group = 'Docker'

    imageName = dockerName
    tag = latestTag
}

task pushImage(type: DockerPushImage, dependsOn: pushLatestImage) {
    description = 'Push the docker on ECR with a tag'
    group = 'Docker'

    imageName = dockerName
    tag = dockerTag
}

task removeImage(type: DockerRemoveImage) {
    force = true
    targetImageId { buildImage.getImageId() }
}

pushImage.finalizedBy removeImage